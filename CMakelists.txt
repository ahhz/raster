cmake_minimum_required(VERSION 3.20)

# This CMake file now works "out of the box" in conjunction with vcpkg. 
# I build gdal, boost, gtest and benchmark with vcpkg and use te vcpkg toolchain as 
# instructed here: https://vcpkg.readthedocs.io/en/latest/examples/installing-and-using-packages/

project(pronto)

################################################################
# These are the main options about which projects to make
#
option(CREATE_PRONTO_RASTER_EXAMPLE  "Create project for Example 1 of  Pronto Raster" ON)
option(CREATE_PRONTO_RASTER_TEST  "Create project for testing Pronto Raster" ON)
option(CREATE_PRONTO_RASTER_BENCHMARK  "Create project for benchmarking Pronto Raster" ON)
option(CREATE_PRONTO_RASTER_HEADERS "Create dummy project containing all Pronto Raster headers" ON)
option(CREATE_PRONTO_RASTER_PYTHON "Create python bindings (tentative)" ON)

################################################################
# Avoid the compile error: "Error C1128	number of sections 
# exceeded object file format limit: compile with /bigobj"
#
if(WIN32)
	add_definitions(/bigobj)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /bigobj")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /bigobj")
	set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} /bigobj")
endif(WIN32)

################################################################
# Creating the main library: Pronto Raster
#

# Require C++20, std:c++latest for msvc and -std=c++20 for everyone else
if (MSVC)
    # this change happened in CMake 3.20.4
    set(PRONTO_CXX_STANDARD 23) # /std:c++latest - unlocks the non stable cpp20 features. For new 16.11 versions
else ()
    set(PRONTO_CXX_STANDARD 20) # /std:c++latest for msvc and -std=c++20 for everyone else.
endif ()

set(pronto_raster_files
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/access_type.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/any_blind_raster.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/any_raster.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/assign.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/blind_function.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/circular_edge_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/circular_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/complex_numbers.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/default_construction_functor.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/distance_transform.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/distance_weighted_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/edge_raster.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/exceptions.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/fuzzy_kappa.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/gdal_block.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/gdal_includes.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/gdal_raster_iterator.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/gdal_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/index_sequence.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator_functions.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/io.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/iterator_facade.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/moving_window_indicator.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/nodata_transform.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/offset_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/optional.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/optional_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/padded_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/pair_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/patch_raster_transform.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/plot_raster.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/random_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/raster.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/raster_algebra_operators.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/raster_algebra_transform.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/raster_algebra_wrapper.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/raster_allocator.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/rectangle_edge_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/rectangle_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/reference_proxy.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/reference_proxy_vector.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/square_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/subraster_window_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/traits.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/transform_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/tuple_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/uniform_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/vector_of_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/weighted_raster_view.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/area_weighted_patch_size.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/count.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/edge_density.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/interspersion.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/map_window.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/mean.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/most_common_class.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/patch_weighted_shape_index.h
	${CMAKE_CURRENT_SOURCE_DIR}/include/pronto/raster/indicator/shannon_diversity.h
	${CMAKE_CURRENT_SOURCE_DIR}/src/pronto/raster/io.cpp
)

add_library(pronto_raster ${pronto_raster_files})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/ )
set_target_properties(pronto_raster PROPERTIES CXX_STANDARD ${PRONTO_CXX_STANDARD})

# Set include directory, 
target_include_directories(pronto_raster INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include/ )

# take care of GDAL dependency
find_package(GDAL REQUIRED)
target_include_directories(pronto_raster INTERFACE ${GDAL_INCLUDE_DIRS})
target_link_libraries(pronto_raster INTERFACE ${GDAL_LIBRARIES})




################################################################
# Creating a simple executable: Example 1
#
if(CREATE_PRONTO_RASTER_EXAMPLE)
	add_executable(pronto_example ${CMAKE_CURRENT_SOURCE_DIR}//examples/example_1.cpp)
	target_link_libraries (pronto_example PRIVATE pronto_raster)
	set_target_properties(pronto_example PROPERTIES CXX_STANDARD ${PRONTO_CXX_STANDARD})
endif()

################################################################
# Creating the testing executable
#
if(CREATE_PRONTO_RASTER_TEST)

	find_package(GTest CONFIG REQUIRED)

	set(test_files
		${CMAKE_CURRENT_SOURCE_DIR}/tests/any_blind_raster_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/dependencies_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/edge_view_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/gdal_raster_view_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/io_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/main.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/raster_algebra_tests.cpp
		${CMAKE_CURRENT_SOURCE_DIR}/tests/transform_tests.cpp
	)

	add_executable(pronto_test ${test_files} )
	set_target_properties(pronto_test PROPERTIES CXX_STANDARD ${PRONTO_CXX_STANDARD})
	
	target_link_libraries(pronto_test PRIVATE pronto_raster)
	target_link_libraries(pronto_test PRIVATE GTest::gtest_main)
endif()

################################################################
# Creating the benchmarking executable
#
if(CREATE_PRONTO_RASTER_BENCHMARK)

	find_package(benchmark CONFIG REQUIRED)
	set(benchmark_files
		${CMAKE_CURRENT_SOURCE_DIR}/benchmarks/benchmark.cpp
	)
	
	add_executable(pronto_benchmark ${benchmark_files})
	set_target_properties(pronto_benchmark PROPERTIES CXX_STANDARD ${PRONTO_CXX_STANDARD})
	target_link_libraries(pronto_benchmark PRIVATE pronto_raster)
	target_link_libraries(pronto_benchmark PRIVATE benchmark::benchmark)
endif()

################################################################
# Creating the python bindings (tentative)
#
if(CREATE_PRONTO_RASTER_PYTHON)
		
	find_package(pybind11 CONFIG REQUIRED)
  	set(python_binding_files
		${CMAKE_CURRENT_SOURCE_DIR}/bindings/python.cpp
	)
	pybind11_add_module(pronto_python MODULE ${python_binding_files})
	set_target_properties(pronto_python PROPERTIES CXX_STANDARD ${PRONTO_CXX_STANDARD})
	target_link_libraries(pronto_python PRIVATE pronto_raster)
	target_link_libraries(pronto_python PRIVATE pybind11::module)
	install(TARGETS pronto_python LIBRARY DESTINATION .)
	install(TARGETS pronto_raster LIBRARY DESTINATION .)
endif()

################################################################
# Creating the Pronto Raster library
#
if(CREATE_PRONTO_RASTER_LIB)

endif()
